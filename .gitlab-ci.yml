stages:
- build
- testing
- compile
- deploy

variables:
  NGINX_IMAGE: ${CI_REGISTRY_IMAGE}/nginx:${CI_COMMIT_SHA}
  NGINX_IMAGE_LATEST: ${CI_REGISTRY_IMAGE}/nginx:latest
  PHP_IMAGE: ${CI_REGISTRY_IMAGE}/php:${CI_COMMIT_SHA}
  PHP_IMAGE_LATEST: ${CI_REGISTRY_IMAGE}/php:latest
  KUBECONFIG: /root/.kube/config

src:
  stage: compile
  image: ${CI_REGISTRY}/nexteum-user/nexteum-user-php:7.2-fpm-alpine-dev
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
    - vendor/
  artifacts:
    name: src
    expire_in: 2 days
    paths:
    - .
  script:
  # Setup application in production mode (required to install dependencies)
  - export APP_ENV=prod
  # Install ONLY PRODUCTION dependencies
  - composer install --no-dev --optimize-autoloader --no-ansi --no-interaction --no-scripts
  only:
  - master
  - develop



.building: &building
  stage: build
  image: docker:stable
  services:
  - docker:dind
  before_script:
  - docker login -u ${CI_REGISTRY_USER} -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  only:
  - master
  - develop
.building_script: &building_script |
  docker build \
      --pull \
      --compress \
      --cache-from ${IMAGE} \
      -f ${DOCKERFILE} \
      -t ${IMAGE} \
      .
  docker tag ${IMAGE} ${IMAGE_LATEST}
  docker push ${IMAGE}
  docker push ${IMAGE_LATEST}

image:nginx:
  <<: *building
  variables:
    DOCKERFILE: .docker/nginx/Dockerfile
  script:
  - export IMAGE=${NGINX_IMAGE}
  - export IMAGE_LATEST=${NGINX_IMAGE_LATEST}
  - *building_script

image:php-fpm:
  <<: *building
  variables:
    DOCKERFILE: .docker/php/Dockerfile
  script:
  - export IMAGE=${PHP_IMAGE}
  - export IMAGE_LATEST=${PHP_IMAGE_LATEST}
  - *building_script


#unit-tests:
#  stage: testing
#  image: ${CI_REGISTRY}/nexteum-user/nexteum-user-php:7.2-fpm-alpine-dev
#
#
#  cache:
#    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
#    paths:
#    - vendor/
##  before_script:
##  - eval $(ssh-agent -s)
##  - mkdir -p ~/.ssh
##  - echo "${SSH_PRIVATE_KEY}" | ssh-add -
##  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#  script:
#  - export APP_ENV=test
#  # Install DEVELOPMENT dependencies
#  - composer install --dev --optimize-autoloader --no-ansi --no-interaction --no-scripts
#  - cp ./phpunit.xml.dist ./phpunit.xml
#  - cp ./.env.test ./.env
#  - vendor/bin/phpunit --configuration ./phpunit.xml --coverage-text --colors=never ./tests
