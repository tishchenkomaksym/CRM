<?php
/**
 * Created by PhpStorm.
 * User: ivan.me
 * Date: 13.03.2019
 * Time: 12:25
 */

namespace App\Service\User\PhpDeveloper\Hours;

use App\Entity\Holiday;
use App\Entity\Sdt;
use App\Entity\User;
use App\Repository\SdtRepository;
use App\Service\ElasticSearchClient;
use App\Service\User\Sdt\UsedSdtDaysCalculator;
use App\Service\WorkingDays\BaseWorkingDaysCalculator;
use DateTime;
use Exception;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class BaseWorkHoursInformationBuilderTest extends TestCase
{
    /**
     * @var BaseWorkingDaysCalculator|MockObject
     */
    private $calculator;
    /**
     * @var ElasticSearchClient|MockObject
     */
    private $searchClient;
    /**
     * @var SdtRepository|MockObject
     */
    private $sdtRepository;

    /**
     * @var BaseWorkHoursInformationBuilder
     */
    private $builder;
    /**
     * @var User
     */
    private $user;

    /**
     * @throws Exception
     */
    public function setUp()
    {

        $this->calculator = $this->createMock(BaseWorkingDaysCalculator::class);
        $holiday = new Holiday();
        $holidayDate = new DateTime();
        $holidayDate->setDate(2019, 01, 02);
        $holiday->setDate($holidayDate);
        $this->calculator->method('getWorkingHoursBetweenDates')->willReturn(5);
        $this->searchClient = $this->createMock(ElasticSearchClient::class);
        $this->sdtRepository = $this->createMock(SdtRepository::class);
        /** @var MockObject|UsedSdtDaysCalculator $usedSdtDaysCalculator */
        $usedSdtDaysCalculator = $this->createMock(UsedSdtDaysCalculator::class);
        $this->user = new User();
        $this->builder = new BaseWorkHoursInformationBuilder(
            $this->searchClient, $this->sdtRepository, $this->calculator,$usedSdtDaysCalculator
        );
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws Exception
     */
    public function testBuild()
    {
        $this->searchClient->method('getTimeFromDateToDate')->willReturn(1);
        $sdt = new Sdt();
        $this->sdtRepository->method('getSDTFromDateToDate')->willReturn([$sdt->setCount(1)]);
        $from = new DateTime();
        $from->setDate(2019, 01, 1);
        $toDate = new DateTime();
        $toDate->setDate(2019, 01, 3);
        $information = new WorkHoursInformation();
        $information->setRequiredTime(5);
        $information->setLoggedTime(1 * 7.5+1);
        $information->setUser($this->user);
        $resultInformation = $this->builder->build($from, $toDate, $this->user);
        $this->assertEquals($information, $resultInformation);
    }


}
