<?php
/**
 * Created by PhpStorm.
 * User: ivan.me
 * Date: 07.02.2019
 * Time: 11:22
 */

namespace App\Security;

use App\Entity\User;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Routing\RouterInterface;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoder;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;

class LoginFormLdapAuthenticatorTest extends KernelTestCase
{
    /**
     * @var EntityManager
     */
    protected $entityManager;

    /**
     * @throws \Doctrine\ORM\ORMException
     */
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $kernel = self::bootKernel();

        $this->entityManager = $kernel->getContainer()
                                      ->get('doctrine')
                                      ->getManager();

        $user = new User();
        $user->setEmail('test@onyx.com');
        $user->setRoles(['ROLE_USER', 'ROLE_RECRUITER']);
        $user->setPassword('test');
        $this->entityManager->persist($user);
        $this->entityManager->flush();

    }


    /**
     * @dataProvider getDbUserDataProvider
     * @param $credentialsEmail
     * @throws \Doctrine\Common\Persistence\Mapping\MappingException
     */
    public function testGetDbUser(string $credentialsEmail)
    {
        $entityManagerInterface = $this->createMock(EntityManagerInterface::class);
        $router = $this->createMock(RouterInterface::class);
        $csrfTokenManagerInterface = $this->createMock(CsrfTokenManagerInterface::class);
        $userPasswordEncoder = $this->createMock(UserPasswordEncoder::class);
        $userPasswordEncoder->expects($this->any())->method('encodePassword')->willReturn('qwe');
        $userRepository = $this->entityManager->getRepository(User::class);
        $loginForm = new LoginFormLdapAuthenticator(
            $entityManagerInterface,
            $router,
            $csrfTokenManagerInterface,
            $userPasswordEncoder,
            $userRepository
        );

        $this->entityManager->getConnection()->beginTransaction();
        $returnUser = $loginForm->getDbUser($credentialsEmail, $credentialsEmail);
        $this->assertEquals($credentialsEmail . '@onyx.com', $returnUser->getEmail());
        $this->entityManager->commit();
        $this->entityManager->clear();
    }

    public function getDbUserDataProvider()
    {
        return [
            ['test'],
            ['newUser'],
        ];
    }

    /**
     * @throws \Doctrine\ORM\ORMException
     */
    protected function tearDown()
    {
        try {
            $this->entityManager->getConnection()->beginTransaction();
            $this->entityManager->getConnection()->setAutoCommit(false);
            $repository = $this->entityManager->getRepository(User::class);
            $email = $repository->findOneBy(['email' => 'test@onyx.com']);
            if ($email) {
                $this->entityManager->remove($email);
            }
            $this->entityManager->commit();
            $newUser = $repository->findOneBy(['email' => 'newUser']);
            if ($newUser) {
                $this->entityManager->remove($newUser);
            }
            $this->entityManager->flush();
            $this->entityManager->commit();
        } catch (\Exception $exception) {
            echo $exception->getMessage();
        }
    }

}
